<?php
// src/Top10/CabinetBundle/Entity/Repository/LikesRepository.php

namespace Top10\CabinetBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * CommentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LikesRepository extends EntityRepository
{

//Posts
	public function getCountLikes( $arrWhere = null, $ip = null )
    {
        $qb = $this->createQueryBuilder('l')
                   ->select('count(l.id)');

		if( isset( $arrWhere['homes'] ) )
            $qb->where('l.homes = :homes_id')
			   ->setParameter('homes_id', $arrWhere['homes']);

		if( isset( $arrWhere['rooms'] ) )
            $qb->where('l.rooms = :room_id')
			   ->setParameter('room_id', $arrWhere['rooms']);

		if( isset( $arrWhere['posts'] ) )
            $qb->where('l.posts = :post_id')
			   ->setParameter('post_id', $arrWhere['posts']);

		if( isset( $arrWhere['comments'] ) )
            $qb->where('l.comments = :comment_id')
			   ->setParameter('comment_id', $arrWhere['comments']);

		if ( false === is_null($ip) )
            $qb->andWhere('l.ip = :ip')
               ->setParameter('ip', $ip);

        return $qb->getQuery()->getSingleScalarResult();
    }

	public function getCountLikesForPost($postId = null, $commentId = null, $ip = null )
    {
        $qb = $this->createQueryBuilder('l')
                   ->select('count(l.id)');

		if ( false === is_null($postId) )
            $qb->where('l.posts = :post_id')
			   ->setParameter('post_id', $postId);

		if ( false === is_null($commentId) )
            $qb->where('l.comments = :comment_id')
			   ->setParameter('comment_id', $commentId);

		if ( false === is_null($ip) )
            $qb->andWhere('l.ip = :ip')
               ->setParameter('ip', $ip);

        return $qb->getQuery()->getSingleScalarResult();
    }


//Rooms
	public function getCountLikesForRoom($roomId = null, $commentId = null, $ip = null )
    {
        $qb = $this->createQueryBuilder('l')
                   ->select('count(l.id)');

		if ( false === is_null($roomId) )
            $qb->where('l.rooms = :room_id')
			   ->setParameter('room_id', $roomId);

		if ( false === is_null($commentId) )
            $qb->where('l.comments = :comment_id')
			   ->setParameter('comment_id', $commentId);

		if ( false === is_null($ip) )
            $qb->andWhere('l.ip = :ip')
               ->setParameter('ip', $ip);

        return $qb->getQuery()->getSingleScalarResult();
    }

//Homes
	public function getCountLikesForhome($homeId = null, $commentId = null, $ip = null )
    {
        $qb = $this->createQueryBuilder('l')
                   ->select('count(l.id)');

		if ( false === is_null($homeId) )
            $qb->where('l.homes = :homes_id')
			   ->setParameter('homes_id', $homeId);

		if ( false === is_null($commentId) )
            $qb->where('l.comments = :comment_id')
			   ->setParameter('comment_id', $commentId);

		if ( false === is_null($ip) )
            $qb->andWhere('l.ip = :ip')
               ->setParameter('ip', $ip);

        return $qb->getQuery()->getSingleScalarResult();
    }
}
